Here is a comprehensive README file for your Flask Docker application:

---

# Docker-Flask-Application

This repository contains a Dockerized Flask application designed for simplicity and ease of deployment. The application includes an Nginx server as a reverse proxy, a MariaDB database, and a Flask web application.

## Table of Contents

- [Features](#features)
- [Project Structure](#project-structure)
- [Requirements](#requirements)
- [Setup](#setup)
  - [Clone the Repository](#clone-the-repository)
  - [Environment Variables](#environment-variables)
  - [Build and Run](#build-and-run)
- [Usage](#usage)
- [Development](#development)
- [Deployment](#deployment)
- [Scaling with Docker Swarm](#scaling-with-docker-swarm)
- [License](#license)

## Features

- User authentication (login page)
- Blog listings page
- Blog post detail page
- Admin page to create and manage blog posts
- Dockerized services for isolated and consistent environments
- Nginx as a reverse proxy for handling client requests
- MariaDB as the database backend
- Gunicorn as the WSGI HTTP server for Flask

## Project Structure

```
.
├── app
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
│   ├── static
│   └── templates
├── config.py
├── docker-compose.yml
├── Dockerfile
├── nginx
│   └── nginx.conf
├── requirements.txt
└── README.md
```

## Requirements

- Docker
- Docker Compose

## Setup

### Clone the Repository

```bash
git clone https://github.com/sameerakhtari/Docker-Flask-Application.git
cd Docker-Flask-Application
```

### Environment Variables

Create a `.env` file in the root directory of the project and add the following environment variables:

```env
FLASK_APP=app
FLASK_ENV=development
SECRET_KEY=your_secret_key
DATABASE_URI=mysql+pymysql://user:password@db/flask_app_db
```

### Build and Run

Build the Docker images and start the containers:

```bash
docker-compose up --build
```

This command will:

1. Build the Docker images for the Flask application and Nginx.
2. Start the MariaDB, Flask application, and Nginx containers.

## Usage

Access the application at `http://localhost`.

- Login page: `http://localhost/login`
- Blog listings page: `http://localhost/blogs`
- Blog post detail page: `http://localhost/blog/<post_id>`
- Admin page: `http://localhost/admin`

## Development

During development, you can use the following commands:

- To start the application in development mode:

  ```bash
  docker-compose up
  ```

- To stop the application:

  ```bash
  docker-compose down
  ```

## Deployment

For production deployment, ensure that:

1. Environment variables are properly set.
2. The application is built using the `docker-compose up --build` command.
3. Necessary security measures (like setting `FLASK_ENV=production`) are implemented.

## Scaling with Docker Swarm

To handle more load and ensure high availability, you can convert the setup to use Docker Swarm.

1. Initialize Docker Swarm:

   ```bash
   docker swarm init
   ```

2. Deploy the stack:

   ```bash
   docker stack deploy -c docker-compose.yml flaskapp
   ```

3. Scale the services:

   ```bash
   docker service scale flaskapp_nginx=3 flaskapp_flask=3
   ```

This will scale the Nginx and Flask services to 3 instances each, balancing the load among them.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

---

Feel free to adjust any sections to better fit your specific application and requirements.
