Docker-Flask-Application

This repository contains a Dockerized Flask application designed for simplicity and ease of deployment. The application includes an Nginx server as a reverse proxy, a MariaDB database, and a Flask web application.

Table of Contents

Features
Project Structure
Requirements
Setup
Clone the Repository
Environment Variables
Build and Run
Usage
Development
Deployment
Scaling with Docker Swarm
License
Features

User authentication (login page)
Blog listings page
Blog post detail page
Admin page to create and manage blog posts
Dockerized services for isolated and consistent environments
Nginx as a reverse proxy for handling client requests
MariaDB as the database backend
Gunicorn as the WSGI HTTP server for Flask
Project Structure

arduino
Copy code
.
├── app
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
│   ├── static
│   └── templates
├── config.py
├── docker-compose.yml
├── Dockerfile
├── nginx
│   └── nginx.conf
├── requirements.txt
└── README.md
Requirements

Docker
Docker Compose
Setup

Clone the Repository
bash
Copy code
git clone https://github.com/sameerakhtari/Docker-Flask-Application.git
cd Docker-Flask-Application
Environment Variables
Create a .env file in the root directory of the project and add the following environment variables:

env
Copy code
FLASK_APP=app
FLASK_ENV=development
SECRET_KEY=your_secret_key
DATABASE_URI=mysql+pymysql://user:password@db/flask_app_db
Build and Run
Build the Docker images and start the containers:

bash
Copy code
docker-compose up --build
This command will:

Build the Docker images for the Flask application and Nginx.
Start the MariaDB, Flask application, and Nginx containers.
Usage

Access the application at http://localhost.

Login page: http://localhost/login
Blog listings page: http://localhost/blogs
Blog post detail page: http://localhost/blog/<post_id>
Admin page: http://localhost/admin
Development

During development, you can use the following commands:

To start the application in development mode:

bash
Copy code
docker-compose up
To stop the application:

bash
Copy code
docker-compose down
Deployment

For production deployment, ensure that:

Environment variables are properly set.
The application is built using the docker-compose up --build command.
Necessary security measures (like setting FLASK_ENV=production) are implemented.
Scaling with Docker Swarm

To handle more load and ensure high availability, you can convert the setup to use Docker Swarm.

Initialize Docker Swarm:

bash
Copy code
docker swarm init
Deploy the stack:

bash
Copy code
docker stack deploy -c docker-compose.yml flaskapp
Scale the services:

bash
Copy code
docker service scale flaskapp_nginx=3 flaskapp_flask=3
This will scale the Nginx and Flask services to 3 instances each, balancing the load among them.

License

This project is licensed under the MIT License. See the LICENSE file for details.

